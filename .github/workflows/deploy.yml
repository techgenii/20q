name: Deploy Backend to AWS Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.13'

jobs:
  test-secrets:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Secrets and Variables
      run: |
        echo "🔐 Testing deployment secrets and variables..."
        
        # Test required secrets
        if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
          echo "❌ SUPABASE_SERVICE_ROLE_KEY is missing"
          exit 1
        fi
        echo "✅ SUPABASE_SERVICE_ROLE_KEY is set"
        
        if [ -z "${{ secrets.SUPABASE_ANON_KEY }}" ]; then
          echo "❌ SUPABASE_ANON_KEY is missing"
          exit 1
        fi
        echo "✅ SUPABASE_ANON_KEY is set"
        
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "❌ OPENAI_API_KEY is missing"
          exit 1
        fi
        echo "✅ OPENAI_API_KEY is set"
        
        if [ -z "${{ secrets.ELEVENLABS_API_KEY }}" ]; then
          echo "❌ ELEVENLABS_API_KEY is missing"
          exit 1
        fi
        echo "✅ ELEVENLABS_API_KEY is set"
        
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "❌ AWS_ACCESS_KEY_ID is missing"
          exit 1
        fi
        echo "✅ AWS_ACCESS_KEY_ID is set"
        
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "❌ AWS_SECRET_ACCESS_KEY is missing"
          exit 1
        fi
        echo "✅ AWS_SECRET_ACCESS_KEY is set"
        
        # Test variables (safe to show)
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
          echo "❌ SUPABASE_URL is missing"
          exit 1
        fi
        echo "✅ SUPABASE_URL is set: ${{ secrets.SUPABASE_URL }}"

  test:
    runs-on: ubuntu-latest
    needs: test-secrets
    defaults:
      run:
        working-directory: ./backend
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        # Install system dependencies needed for building wheels
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        # Copy pip configuration to prefer pre-built wheels
        cp backend/pip.conf ~/.pip/pip.conf || mkdir -p ~/.pip && cp backend/pip.conf ~/.pip/pip.conf
        
        # Try multiple installation strategies
        echo "Attempting to install dependencies..."
        
        # Strategy 1: Normal installation
        if pip install -r requirements.txt; then
          echo "Requirements installed successfully"
        else
          echo "Normal installation failed, trying with --only-binary=all"
          # Strategy 2: Force pre-built wheels
          pip install --only-binary=all -r requirements.txt || {
            echo "Binary-only installation failed, trying individual packages"
            # Strategy 3: Install packages individually
            pip install --only-binary=all fastapi uvicorn mangum supabase openai requests python-multipart
            pip install --only-binary=all "pydantic[email]>=2.7.0"
          }
        fi
        
        # Install dev requirements
        pip install -r ../dev-requirements.txt || pip install --only-binary=all -r ../dev-requirements.txt

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=backend --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/htmlcov/coverage.xml
        flags: backend
        name: backend-coverage

  deploy:
    needs: [test-secrets, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.17.0'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Node.js dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to AWS Lambda
      env:
        SUPABASE_URL: ${{ vars.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      run: |
        npx serverless deploy --stage prod --region ${{ env.AWS_REGION }} --verbose

    - name: Get deployment URL
      id: deployment-url
      run: |
        API_URL=$(npx serverless info --stage prod --region ${{ env.AWS_REGION }} --verbose | grep -o 'https://[^/]*\.execute-api\.us-east-1\.amazonaws\.com/prod' | head -1)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Comment deployment URL
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚀 Deployment successful')
          );
          
          const commentBody = `🚀 **Deployment successful!**
          
          **API URL:** ${{ steps.deployment-url.outputs.api_url }}
          
          **Environment:** Production
          **Region:** ${{ env.AWS_REGION }}
          
          Your 20Q Game API is now live and ready to use!`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          } 