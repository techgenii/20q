name: Test Secrets and Variables Access

# Run on multiple events to ensure frequent testing
on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Manual trigger
  schedule:
    # Run daily at 2 AM UTC to ensure secrets are always working
    - cron: '0 2 * * *'

jobs:
  test-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Secret Presence (Safe Method)
        run: |
          # Test if secrets exist without exposing their values
          if [ -n "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set (value is masked)"
          else
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY is not set"
            exit 1
          fi
          
          if [ -n "${{ secrets.SUPABASE_ANON_KEY }}" ]; then
            echo "‚úÖ SUPABASE_ANON_KEY is set (value is masked)"
          else
            echo "‚ùå SUPABASE_ANON_KEY is not set"
            exit 1
          fi

      - name: Test Variable Presence
        run: |
          # Test if variables exist (these are visible in logs)
          if [ -n "${{ vars.SUPABASE_URL }}" ]; then
            echo "‚úÖ SUPABASE_URL is set: ${{ vars.SUPABASE_URL }}"
          else
            echo "‚ùå SUPABASE_URL is not set"
            exit 1
          fi

      - name: Test Environment Variables in Python
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          python3 -c "
          import os
          
          # Test environment variables
          required_vars = [
              'SUPABASE_URL',
              'SUPABASE_SERVICE_ROLE_KEY', 
              'SUPABASE_ANON_KEY'
          ]
          
          missing_vars = []
          for var in required_vars:
              value = os.getenv(var)
              if value is None:
                  missing_vars.append(var)
              else:
                  # Show first few characters for secrets (safe)
                  if 'KEY' in var:
                      print(f'‚úÖ {var}: {value[:10]}... (masked)')
                  else:
                      print(f'‚úÖ {var}: {value}')
          
          if missing_vars:
              print(f'‚ùå Missing variables: {missing_vars}')
              exit(1)
          else:
              print('üéâ All environment variables are set!')
          "

      - name: Test Supabase Client Creation
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          cd backend
          python3 -c "
          import sys
          sys.path.append('.')
          
          try:
              from supabase_client import get_supabase_client, get_supabase_auth_client
              
              # Test client creation
              client1 = get_supabase_client()
              client2 = get_supabase_auth_client()
              
              print('‚úÖ Supabase clients created successfully')
              print(f'‚úÖ Service role client: {type(client1)}')
              print(f'‚úÖ Auth client: {type(client2)}')
              
          except Exception as e:
              print(f'‚ùå Failed to create Supabase clients: {e}')
              exit(1)
          "

      - name: Test Secret Length (Security Check)
        run: |
          # Check if secrets have reasonable length (basic validation)
          service_key="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}"
          anon_key="${{ secrets.SUPABASE_ANON_KEY }}"
          
          if [ ${#service_key} -lt 20 ]; then
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY seems too short"
            exit 1
          else
            echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY has reasonable length"
          fi
          
          if [ ${#anon_key} -lt 20 ]; then
            echo "‚ùå SUPABASE_ANON_KEY seems too short"
            exit 1
          else
            echo "‚úÖ SUPABASE_ANON_KEY has reasonable length"
          fi

      - name: Test URL Format
        run: |
          # Validate URL format
          url="${{ vars.SUPABASE_URL }}"
          
          if [[ $url =~ ^https://.*\.supabase\.co$ ]]; then
            echo "‚úÖ SUPABASE_URL has correct format: $url"
          else
            echo "‚ùå SUPABASE_URL format is invalid: $url"
            exit 1
          fi 