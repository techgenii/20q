name: Step 2 - Deploy to Lambda

on:
  workflow_run:
    workflows: ["Step 1 - Test Backend"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy-code:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      ZIP_FILE: lambda-deploy.zip
      BUILD_DIR: build
      PYTHON_VERSION: 3.13
      HANDLER: app.handler
      RUNTIME: python3.13
      FUNCTION_NAME: ${{ secrets.FUNCTION_NAME }}
      ROLE_ARN: ${{ secrets.LAMBDA_ROLE_ARN }}
      REGION: ${{ secrets.AWS_REGION }}
      API_GATEWAY_NAME: ${{ secrets.API_GATEWAY_NAME || 'MyAPI' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Prepare build directory
        run: |
          rm -rf $BUILD_DIR $ZIP_FILE venv
          python -m venv venv
          source venv/bin/activate
          mkdir -p $BUILD_DIR
          pip install -r backend/requirements.txt -t $BUILD_DIR
          cp -r backend/. $BUILD_DIR/
          deactivate

      - name: Check build contents
        run: |
          if [ ! -f "$BUILD_DIR/app.py" ]; then
            echo "❌ app.py not at root of build dir!"
            exit 1
          fi

      - name: Zip Lambda package
        run: |
          cd $BUILD_DIR
          zip -r ../lambda-deploy.zip .
          cd ..

      - name: Verify Lambda package exists
        run: |
          if [ ! -f lambda-deploy.zip ]; then
            echo "❌ ERROR: Lambda deployment package not found."
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: lambda-deploy
          path: lambda-deploy.zip

      - name: Deploy Lambda & API Gateway
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region $REGION

          set +e
          aws lambda get-function --function-name $FUNCTION_NAME > /dev/null 2>&1
          EXISTS=$?
          set -e

          if [ $EXISTS -ne 0 ]; then
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --zip-file fileb://lambda-deploy.zip
          else
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://lambda-deploy.zip
          fi

          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_GATEWAY_NAME'].ApiId" --output text)

          if [ -z "$API_ID" ]; then
            API_ID=$(aws apigatewayv2 create-api \
              --name "$API_GATEWAY_NAME" \
              --protocol-type HTTP \
              --target arn:aws:lambda:$REGION:$ACCOUNT_ID:function:$FUNCTION_NAME \
              --query "ApiId" --output text)
          fi

          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id apigateway-access \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn arn:aws:execute-api:$REGION:$ACCOUNT_ID:$API_ID/*/*/ \
            || echo "Permission already exists."

          echo "https://$API_ID.execute-api.$REGION.amazonaws.com/"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
