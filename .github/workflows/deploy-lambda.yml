name: Deploy to Lambda (ARM64)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      ZIP_FILE: lambda-deploy.zip
      BUILD_DIR: build
      PYTHON_VERSION: 3.13
      HANDLER: app.handler
      RUNTIME: python3.13
      ARCHITECTURE: arm64
      STAGE_NAME: WhisperChase  # Custom stage name
      FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      ROLE_ARN: ${{ secrets.LAMBDA_ROLE_ARN }}
      REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.LAMBDA_S3_BUCKET }}
      API_NAME: WhisperChaseAPI  # Distinct API name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: arm64

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Build Lambda package (ARM64)
        run: |
          rm -rf $BUILD_DIR $ZIP_FILE
          mkdir -p $BUILD_DIR

          pip install -r requirements.txt -t $BUILD_DIR \
            --platform manylinux_2014_aarch64 \
            --only-binary=:all: \
            --no-cache-dir \
            --upgrade \
            --python-version 3.13

          cp app.py game_logic.py supabase_client.py elevenlabs_utils.py __init__.py $BUILD_DIR/
          find $BUILD_DIR \( -name '__pycache__' -o -name '*.pyc' \) -exec rm -rf {} +

      - name: Package deployment
        run: |
          cd $BUILD_DIR
          zip -r9 ../$ZIP_FILE .
          cd ..
          echo "size=$(du -h $ZIP_FILE | cut -f1)" >> $GITHUB_OUTPUT

      - name: Deploy Lambda Function
        run: |
          # Create environment variables
          echo '{"Variables": $LAMBDA_ENV_VARS}' > env.json
          
          if aws lambda get-function --function-name $FUNCTION_NAME; then
            # Update existing
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://$ZIP_FILE
            aws lambda update-function-configuration \
              --function-name $FUNCTION_NAME \
              --architectures $ARCHITECTURE \
              --environment file://env.json
          else
            # Create new
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --runtime $RUNTIME \
              --role $ROLE_ARN \
              --handler $HANDLER \
              --architectures $ARCHITECTURE \
              --zip-file fileb://$ZIP_FILE \
              --environment file://env.json
          fi
          aws lambda wait function-updated --function-name $FUNCTION_NAME
        env:
          LAMBDA_ENV_VARS: ${{ secrets.LAMBDA_ENV_VARS || '{}' }}

      - name: Configure API Gateway
        run: |
          # Create API with custom name
          API_ID=$(aws apigatewayv2 create-api \
            --name "$API_NAME" \
            --protocol-type HTTP \
            --query "ApiId" --output text)
          
          # Create integration
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          LAMBDA_ARN="arn:aws:lambda:$REGION:$ACCOUNT_ID:function:$FUNCTION_NAME"
          
          INTEGRATION_ID=$(aws apigatewayv2 create-integration \
            --api-id $API_ID \
            --integration-type AWS_PROXY \
            --integration-uri $LAMBDA_ARN \
            --payload-format-version 2.0 \
            --query 'IntegrationId' --output text)

          # Create routes
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "ANY /" \
            --target "integrations/$INTEGRATION_ID"
            
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key "ANY /{proxy+}" \
            --target "integrations/$INTEGRATION_ID"
          
          # Create custom stage
          aws apigatewayv2 create-stage \
            --api-id $API_ID \
            --stage-name $STAGE_NAME \
            --auto-deploy
          
          # Set permissions
          aws lambda add-permission \
            --function-name $FUNCTION_NAME \
            --statement-id "api-gateway-invoke" \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "arn:aws:execute-api:$REGION:$ACCOUNT_ID:$API_ID/*/*/*"

          # Output endpoint
          ENDPOINT="https://$API_ID.execute-api.$REGION.amazonaws.com/$STAGE_NAME"
          echo "API_ENDPOINT=$ENDPOINT" >> $GITHUB_ENV
          echo "::set-output name=endpoint::$ENDPOINT"

      - name: Post deployment test
        run: |
          curl -s $API_ENDPOINT/health --max-time 10
          echo "WhisperChase stage deployed successfully!"
          echo "Access your API at: $API_ENDPOINT"