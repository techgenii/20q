name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Job 1: Test Secrets and Environment Variables
  test-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Secret Presence
        run: |
          echo "üîê Testing secrets and variables access..."
          
          # Test secrets (values are masked)
          if [ -n "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
          else
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY is missing"
            exit 1
          fi
          
          if [ -n "${{ secrets.SUPABASE_ANON_KEY }}" ]; then
            echo "‚úÖ SUPABASE_ANON_KEY is set"
          else
            echo "‚ùå SUPABASE_ANON_KEY is missing"
            exit 1
          fi

          # Test variables (safe to show)
          if [ -n "${{ vars.SUPABASE_URL }}" ]; then
            echo "‚úÖ SUPABASE_URL is set: ${{ vars.SUPABASE_URL }}"
          else
            echo "‚ùå SUPABASE_URL is missing"
            exit 1
          fi

      - name: Test Environment Variables in Python
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          python3 -c "
          import os
          
          required_vars = ['SUPABASE_URL', 'SUPABASE_SERVICE_ROLE_KEY', 'SUPABASE_ANON_KEY']
          missing = [var for var in required_vars if not os.getenv(var)]
          
          if missing:
              print(f'‚ùå Missing: {missing}')
              exit(1)
          else:
              print('üéâ All environment variables are set!')
          "

  # Job 2: Run Backend Tests
  test-backend:
    runs-on: ubuntu-latest
    needs: test-secrets  # Wait for secrets test to pass first
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r ../dev-requirements.txt

      - name: Run backend tests
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
        run: |
          cd backend
          python -m pytest tests/ -v --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Job 3: Run Frontend Tests (if you have them)
  test-frontend:
    runs-on: ubuntu-latest
    needs: test-secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Job 4: Integration Tests (optional)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-secrets, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r ../dev-requirements.txt

      - name: Run integration tests
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
        run: |
          cd backend
          # Add any integration tests here
          echo "üß™ Running integration tests..."
          # python -m pytest tests/integration/ -v 